{"version":3,"sources":["webpack:///./src/views/Auth/RegisterView.js","webpack:///./src/components/Page.js","webpack:///./src/components/CustomAlert.js"],"names":["useStyles","makeStyles","theme","root","backgroundColor","palette","background","dark","height","paddingBottom","spacing","paddingTop","alert","_defineProperty","position","right","top","breakpoints","down","maxWidth","logo","width","menuPaper","maxHeight","RegisterView","classes","_useState2","_slicedToArray","useState","isAlert","alertTitle","alertText","severity","showAlert","setShowAlert","React","createElement","Page","className","title","CustomAlert","open","onClose","Box","display","flexDirection","justifyContent","PerfectScrollbar","Container","alignItems","marginBottom","Formik","initialValues","name","email","password","passwordConfirmation","validationSchema","Yup","shape","max","required","matches","when","is","val","length","then","oneOf","onSubmit","values","_ref","setSubmitting","resetForm","url","Api","signup","config","headers","Cookies","get","axios","post","res","status","error","response","data","_ref2","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","autoComplete","mb","Typography","color","variant","TextField","Boolean","fullWidth","helperText","label","margin","onBlur","onChange","value","type","my","Button","disabled","size","Link","component","RouterLink","to","forwardRef","ref","children","_ref$title","rest","_objectWithoutProperties","_excluded","_extends","Helmet","propTypes","PropTypes","node","isRequired","string","marginTop","boxShadow","alertContainer","minWidth","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Alert","AlertTitle","prototype","bool","func"],"mappings":"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","file":"RegisterView.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Link,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport { makeStyles } from \"@mui/styles\";\r\n\r\nimport CustomAlert from \"../../components/CustomAlert\";\r\n\r\nimport * as Yup from \"yup\";\r\nimport { Formik } from \"formik\";\r\nimport Cookies from \"js-cookie\";\r\nimport axios from \"axios\";\r\nimport Api from \"../../components/Api\";\r\nimport Page from \"../../components/Page\";\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    height: \"100%\",\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3),\r\n  },\r\n  alert: {\r\n    position: \"absolute\",\r\n    right: 50,\r\n    top: 50,\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      right: 20,\r\n      maxWidth: 250,\r\n    },\r\n  },\r\n  logo: {\r\n    width: 100,\r\n  },\r\n  menuPaper: {\r\n    maxHeight: 200,\r\n  },\r\n}));\r\n\r\nconst RegisterView = () => {\r\n  const classes = useStyles();\r\n  const [showAlert, setShowAlert] = useState({\r\n    isAlert: false,\r\n    alertTitle: \"\",\r\n    alertText: \"\",\r\n    severity: \"\",\r\n  });\r\n\r\n  return (\r\n    <Page className={classes.root} title=\"Register\">\r\n      {showAlert.isAlert ? (\r\n        <CustomAlert\r\n          open={showAlert.isAlert}\r\n          severity={showAlert.severity}\r\n          alertTitle={showAlert.alertTitle}\r\n          alertText={showAlert.alertText}\r\n          onClose={() =>\r\n            setShowAlert({\r\n              isAlert: false,\r\n              alertTitle: \"\",\r\n              alertText: \"\",\r\n              severity: \"\",\r\n            })\r\n          }\r\n        />\r\n      ) : null}\r\n\r\n      <Box\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        height=\"100%\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <PerfectScrollbar>\r\n          <Container maxWidth=\"sm\">\r\n            <Box\r\n              display=\"flex\"\r\n              alignItems=\"center\"\r\n              justifyContent=\"center\"\r\n              marginBottom={2}\r\n            >\r\n              {/* We can place our logo here */}\r\n            </Box>\r\n            <Formik\r\n              initialValues={{\r\n                name: \"\",\r\n                email: \"\",\r\n                password: \"\",\r\n                passwordConfirmation: \"\",\r\n              }}\r\n              validationSchema={Yup.object().shape({\r\n                name: Yup.string().max(255).required(\"name is required\"),\r\n                email: Yup.string()\r\n                  .email(\"Must be a valid email\")\r\n                  .max(255)\r\n                  .required(\"Email is required\"),\r\n\r\n                password: Yup.string()\r\n                  .required(\"Please enter your password\")\r\n                  .matches(\r\n                    /^.*(?=.{8,})((?=.*[!@#$%^&*()\\-_=+{};:,<.>]){1})(?=.*\\d)((?=.*[a-z]){1})((?=.*[A-Z]){1}).*$/,\r\n                    \"Password must contain at least 8 characters, one uppercase, one number and one special case character\"\r\n                  ),\r\n                passwordConfirmation: Yup.string().when(\"password\", {\r\n                  is: (val) => (val && val.length > 0 ? true : false),\r\n                  then: Yup.string().oneOf(\r\n                    [Yup.ref(\"password\")],\r\n                    \"Both password need to be the same\"\r\n                  ),\r\n                }),\r\n              })}\r\n              onSubmit={(values, { setSubmitting, resetForm }) => {\r\n                const url = Api.signup;\r\n\r\n                const config = {\r\n                  headers: {\r\n                    \"X-CSRFToken\": Cookies.get(\"csrftoken\"),\r\n                  },\r\n                };\r\n\r\n                axios\r\n                  .post(url, values, config)\r\n                  .then((res) => {\r\n                    if (res.status === 200) {\r\n                      setShowAlert({\r\n                        isAlert: true,\r\n                        alertText: \"Your are successfully registered.\",\r\n                        severity: \"success\",\r\n                      });\r\n                      setSubmitting(false);\r\n                      resetForm();\r\n                    }\r\n                  })\r\n                  .catch((error) => {\r\n                    if (error.response) {\r\n                      const { data } = error.response;\r\n                      setShowAlert({\r\n                        isAlert: true,\r\n                        alertText: data?.[\"message\"],\r\n                        severity: \"error\",\r\n                        alertTitle: \"Error\",\r\n                      });\r\n                      // resetForm();\r\n                      setSubmitting(false);\r\n                    }\r\n                  });\r\n              }}\r\n            >\r\n              {({\r\n                errors,\r\n                handleBlur,\r\n                handleChange,\r\n                handleSubmit,\r\n                isSubmitting,\r\n                touched,\r\n                values,\r\n              }) => (\r\n                <form autoComplete=\"off\" onSubmit={handleSubmit}>\r\n                  <Box mb={3}>\r\n                    <Typography color=\"textPrimary\" variant=\"h2\">\r\n                      Register\r\n                    </Typography>\r\n                  </Box>\r\n\r\n                  <TextField\r\n                    error={Boolean(touched.name && errors.name)}\r\n                    fullWidth\r\n                    helperText={touched.name && errors.name}\r\n                    label=\"Name\"\r\n                    margin=\"normal\"\r\n                    name=\"name\"\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange}\r\n                    value={values.name}\r\n                    variant=\"outlined\"\r\n                  />\r\n\r\n                  <TextField\r\n                    error={Boolean(touched.email && errors.email)}\r\n                    fullWidth\r\n                    helperText={touched.email && errors.email}\r\n                    label=\"Email Address\"\r\n                    margin=\"normal\"\r\n                    name=\"email\"\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange}\r\n                    type=\"email\"\r\n                    value={values.email}\r\n                    variant=\"outlined\"\r\n                  />\r\n\r\n                  <TextField\r\n                    error={Boolean(touched.password && errors.password)}\r\n                    fullWidth\r\n                    helperText={touched.password && errors.password}\r\n                    label=\"Password\"\r\n                    margin=\"normal\"\r\n                    name=\"password\"\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange}\r\n                    type=\"password\"\r\n                    value={values.password}\r\n                    variant=\"outlined\"\r\n                  />\r\n                  <TextField\r\n                    error={Boolean(\r\n                      touched.passwordConfirmation &&\r\n                        errors.passwordConfirmation\r\n                    )}\r\n                    fullWidth\r\n                    helperText={\r\n                      touched.passwordConfirmation &&\r\n                      errors.passwordConfirmation\r\n                    }\r\n                    label=\"Confirm Password\"\r\n                    margin=\"normal\"\r\n                    name=\"passwordConfirmation\"\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange}\r\n                    type=\"password\"\r\n                    value={values.passwordConfirmation}\r\n                    variant=\"outlined\"\r\n                  />\r\n\r\n                  <Box my={2}>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      disabled={isSubmitting}\r\n                      fullWidth\r\n                      size=\"large\"\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                    >\r\n                      Sign up\r\n                    </Button>\r\n                  </Box>\r\n                  <Typography color=\"textSecondary\" variant=\"body1\">\r\n                    Have an account?{\" \"}\r\n                    <Link component={RouterLink} to=\"/login\" variant=\"h6\">\r\n                      Sign in\r\n                    </Link>\r\n                  </Typography>\r\n                </form>\r\n              )}\r\n            </Formik>\r\n          </Container>\r\n        </PerfectScrollbar>\r\n      </Box>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default RegisterView;\r\n","import React, { forwardRef } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Page = forwardRef(({ children, title = \"\", ...rest }, ref) => {\r\n  return (\r\n    <div ref={ref} {...rest}>\r\n      <Helmet>\r\n        <title>{title}</title>\r\n      </Helmet>\r\n      {children}\r\n    </div>\r\n  );\r\n});\r\n\r\nPage.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default Page;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Snackbar } from \"@mui/material\";\r\nimport { Alert, AlertTitle } from \"@mui/material\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    marginTop: theme.spacing(10),\r\n    boxShadow: \"-2px 5px 15px -2px rgba(0,0,0,0.71)\",\r\n  },\r\n  alertContainer: {\r\n    minWidth: 350,\r\n  },\r\n}));\r\n\r\nconst CustomAlert = ({ open, severity, alertTitle, alertText, onClose }) => {\r\n  let vertical = \"top\",\r\n    horizontal = \"right\";\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Snackbar\r\n      anchorOrigin={{ vertical, horizontal }}\r\n      open={open}\r\n      autoHideDuration={6000}\r\n      onClose={onClose}\r\n      className={classes.root}\r\n    >\r\n      <Alert\r\n        severity={severity}\r\n        onClose={onClose}\r\n        className={classes.alertContainer}\r\n      >\r\n        {alertTitle ? <AlertTitle>{alertTitle}</AlertTitle> : null}\r\n        {alertText}!\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n};\r\n\r\nCustomAlert.prototype = {\r\n  open: PropTypes.bool,\r\n  severity: PropTypes.string, //['success','warning', 'error']\r\n  alertText: PropTypes.string,\r\n  alertTitle: PropTypes.string,\r\n  onClose: PropTypes.func,\r\n};\r\n\r\nexport default CustomAlert;\r\n"],"sourceRoot":""}