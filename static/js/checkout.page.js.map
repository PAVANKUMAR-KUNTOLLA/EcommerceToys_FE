{"version":3,"sources":["webpack:///./src/views/Checkout/LoginStep.js","webpack:///./src/views/Checkout/Address.js","webpack:///./src/views/Checkout/PlaceOrder.js","webpack:///./src/views/Checkout/Payment.js","webpack:///./src/views/Checkout/ShippingPage.js","webpack:///./src/views/Checkout/checkout.page.js","webpack:///./src/components/Page.js"],"names":["LoginStep","React","createElement","AddressStep","_ref","addressData","setAddressData","handleChange","e","_e$target","target","name","value","prevAddressData","_objectSpread","_defineProperty","Box","sx","display","flexDirection","gap","marginTop","maxWidth","justifyContent","marginLeft","marginRight","TextField","id","label","variant","required","address","onChange","city","pincode","country","customPlaceOrderStyles","makeStyles","theme","MainBlock","breakpoints","down","PlaceOrderStep","paymentMethod","customStyles","cart","useSelector","state","products","navigate","useNavigate","className","width","Typography","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","map","row","key","border","scope","title","quantity","price","Button","onClick","console","log","paymentDetails","marginBottom","reduce","acc","item","toFixed","path","concat","customPaymentStyles","FormBox","RadioGroup","PaymentStep","paymentData","setPaymentData","prevPaymentData","isPaymentMethodSelected","isCardPaymentValid","cardNumber","trim","cardHolder","expiryDate","cvv","isUpiPaymentValid","upiId","FormControlLabel","control","Radio","Fragment","error","helperText","steps","OrderPayment","_useState2","_slicedToArray","useState","activeStep","setActiveStep","_useState4","Set","skipped","setSkipped","_useState6","_useState8","isStepOptional","step","isStepSkipped","has","Stepper","index","stepProps","labelProps","optional","completed","Step","_extends","StepLabel","renderStepContent","length","mt","mb","pt","flex","color","disabled","prevActiveStep","mr","Error","prevSkipped","newSkipped","values","add","every","field","alert","CheckOutPage","Page","Container","forwardRef","ref","children","_ref$title","rest","_objectWithoutProperties","_excluded","Helmet","propTypes","PropTypes","node","isRequired","string"],"mappings":"mMAMeA,EAJG,WAChB,OAAOC,IAAAC,cAAA,UAAI,aACb,E,gvCCCA,IAgEeC,EAhEK,SAAHC,GAAwC,IAAlCC,EAAWD,EAAXC,YAAaC,EAAcF,EAAdE,eAC5BC,EAAe,SAACC,GACpB,IAAAC,EAAwBD,EAAEE,OAAlBC,EAAIF,EAAJE,KAAMC,EAAKH,EAALG,MACdN,GAAe,SAACO,GAAe,OAAAC,IAAA,GAC1BD,GAAe,GAAAE,EAAA,GACjBJ,EAAOC,GAAK,GAEjB,EAEA,OACEX,IAAAC,cAAA,YACED,IAAAC,cAACc,IAAG,CACFC,GAAI,CACFC,QAAS,OACTC,cAAe,SACfC,IAAK,OACLC,UAAW,OACXC,SAAU,MACVC,eAAgB,gBAChBC,WAAY,OACZC,YAAa,SAGfxB,IAAAC,cAACwB,IAAS,CACRC,GAAG,UACHhB,KAAK,UACLiB,MAAM,UACNC,QAAQ,WACRC,UAAQ,EACRlB,MAAOP,EAAY0B,QACnBC,SAAUzB,IAEZN,IAAAC,cAACwB,IAAS,CACRC,GAAG,OACHhB,KAAK,OACLiB,MAAM,OACNC,QAAQ,WACRC,UAAQ,EACRlB,MAAOP,EAAY4B,KACnBD,SAAUzB,IAEZN,IAAAC,cAACwB,IAAS,CACRC,GAAG,UACHhB,KAAK,UACLiB,MAAM,UACNC,QAAQ,WACRC,UAAQ,EACRlB,MAAOP,EAAY6B,QACnBF,SAAUzB,IAEZN,IAAAC,cAACwB,IAAS,CACRC,GAAG,UACHhB,KAAK,UACLiB,MAAM,UACNC,QAAQ,WACRC,UAAQ,EACRlB,MAAOP,EAAY8B,QACnBH,SAAUzB,KAKpB,E,6xBCpDA,IAAM6B,EAAyBC,aAAW,SAACC,GAAK,MAAM,CACpDC,UAASxB,EAAA,CACPG,QAAS,OACTG,UAAW,OACXF,cAAe,OACdmB,EAAME,YAAYC,KAAK,MAAQ,CAC9BtB,cAAe,WAGpB,IAwHcuB,EAtHQ,SAAHtC,GAAmC,IAA7B2B,EAAO3B,EAAP2B,QAASY,EAAavC,EAAbuC,cAG3BC,EAAeR,IACfS,EAAOC,aAAY,SAACC,GAAK,OAAKA,EAAMC,SAASH,IAAI,IACjDI,EAAWC,cAgBjB,OACEjD,IAAAC,cAACc,IAAG,CAACM,SAAS,KAAK6B,UAAWP,EAAaL,WACzCtC,IAAAC,cAACc,IAAG,CACFM,SAAS,KACTL,GAAI,CACFC,QAAS,OACTC,cAAe,SACfC,IAAK,OACLgC,MAAO,OACP9B,SAAU,MACVE,WAAY,SAGdvB,IAAAC,cAACc,IAAG,KACFf,IAAAC,cAACmD,IAAU,CAACxB,QAAQ,MAAK,qBAEzB5B,IAAAC,cAACmD,IAAU,KACRtB,EAAQA,QAAQ,KAAGA,EAAQE,KAAK,KAAGF,EAAQG,QAAQ,IAAE,IACrDH,EAAQI,SAEXlC,IAAAC,cAAA,YAEFD,IAAAC,cAACc,IAAG,KACFf,IAAAC,cAACmD,IAAU,CAACxB,QAAQ,MAAK,oBAEzB5B,IAAAC,cAACmD,IAAU,KACU,SAAlBV,EACG,oBACkB,QAAlBA,EACA,MACA,IAEN1C,IAAAC,cAAA,YAEFD,IAAAC,cAACc,IAAG,KACFf,IAAAC,cAACmD,IAAU,CAACxB,QAAQ,MAAK,eAEzB5B,IAAAC,cAACoD,IAAc,CAACC,UAAWC,IAAOvC,GAAI,CAAEI,UAAW,SACjDpB,IAAAC,cAACuD,IAAK,CAACxC,GAAI,CAAEK,SAAU,KAAO,aAAW,gBACvCrB,IAAAC,cAACwD,IAAS,KACRzD,IAAAC,cAACyD,IAAQ,KACP1D,IAAAC,cAAC0D,IAAS,CAACC,MAAM,SACjB5D,IAAAC,cAAC0D,IAAS,CAACC,MAAM,QAAO,SACxB5D,IAAAC,cAAC0D,IAAS,CAACC,MAAM,QAAO,YACxB5D,IAAAC,cAAC0D,IAAS,CAACC,MAAM,QAAO,YAG5B5D,IAAAC,cAAC4D,IAAS,KACPjB,EAAKkB,KAAI,SAACC,GAAG,OACZ/D,IAAAC,cAACyD,IAAQ,CACPM,IAAKD,EAAIrC,GACTV,GAAI,CAAE,mCAAoC,CAAEiD,OAAQ,KAEpDjE,IAAAC,cAAC0D,IAAS,CAACL,UAAU,KAAKY,MAAM,OAC7BH,EAAIrD,MAEPV,IAAAC,cAAC0D,IAAS,CAACC,MAAM,QAAQG,EAAII,OAC7BnE,IAAAC,cAAC0D,IAAS,CAACC,MAAM,QAAQG,EAAIK,UAC7BpE,IAAAC,cAAC0D,IAAS,CAACC,MAAM,QACdG,EAAIK,SAAWL,EAAIM,OAEb,OAMnBrE,IAAAC,cAAA,YAEFD,IAAAC,cAACc,IAAG,CAACC,GAAI,CAAEC,QAAS,OAAQK,eAAgB,kBAC1CtB,IAAAC,cAACqE,IAAO,MACRtE,IAAAC,cAACqE,IAAM,CAACC,QAhFS,WAGvBC,QAAQC,IAAI,oBAAqB3C,GACjC0C,QAAQC,IAAI,mBAAoBC,gBAChCF,QAAQC,IAAI,cAAe7B,EAE7B,MA4EI5C,IAAAC,cAACc,IAAG,CAACC,GAAI,CAAEO,WAAY,SACrBvB,IAAAC,cAACmD,IAAU,CAACxB,QAAQ,KAAK+C,aAAa,QAAO,aAE1C/B,EACEgC,QAAO,SAACC,EAAKC,GAAI,OAAKD,EAAMC,EAAKV,SAAWU,EAAKT,KAAK,GAAE,GACxDU,QAAQ,IAEb/E,IAAAC,cAACmD,IAAU,CAACuB,aAAa,QAAO,oDAGhC3E,IAAAC,cAACmD,IAAU,CAACuB,aAAa,QAAO,oCAGhC3E,IAAAC,cAACc,IAAG,CAAC4D,aAAa,QAChB3E,IAAAC,cAACqE,IAAM,CAAC1C,QAAQ,WAAW2C,QAAS,kBArGtCS,EAAO,QAAHC,OAqGkD,aApG1DjC,EAASgC,GAFO,IACZA,CAqG6D,GAAE,iBAOvE,E,wwCCrIA,IAAME,EAAsB9C,aAAW,SAACC,GAAK,MAAM,CACjD8C,QAAOrE,EAAA,CACLG,QAAS,OACTC,cAAe,SACfC,IAAK,OACLC,UAAW,OACXC,SAAU,MACVC,eAAgB,gBAChBC,WAAY,OACZC,YAAa,QACZa,EAAME,YAAYC,KAAK,MAAQ,CAC9BnB,SAAU,QAGd+D,WAAUtE,EAAA,CACRI,cAAe,OACdmB,EAAME,YAAYC,KAAK,MAAQ,CAC9BtB,cAAe,WAGpB,IAmJcmE,EAjJK,SAAHlF,GAAwC,IAAlCmF,EAAWnF,EAAXmF,YAAaC,EAAcpF,EAAdoF,eAC5B5C,EAAeuC,IAEf5E,EAAe,SAACC,GACpB,IAAAC,EAAwBD,EAAEE,OAAlBC,EAAIF,EAAJE,KAAMC,EAAKH,EAALG,MACd4E,GAAe,SAACC,GAAe,OAAA3E,IAAA,GAC1B2E,GAAe,GAAA1E,EAAA,GACjBJ,EAAOC,GAAK,GAEjB,EAEM8E,EAA0B,WAC9B,MAAqC,KAA9BH,EAAY5C,aACrB,EAEMgD,EAAqB,WACzB,MACoC,KAAlCJ,EAAYK,WAAWC,QACW,KAAlCN,EAAYO,WAAWD,QACW,KAAlCN,EAAYQ,WAAWF,QACI,KAA3BN,EAAYS,IAAIH,MAEpB,EAEMI,EAAoB,WACxB,MAAoC,KAA7BV,EAAYW,MAAML,MAC3B,EAcA,OACE5F,IAAAC,cAAA,YACED,IAAAC,cAACc,IAAG,CAACmC,UAAWP,EAAawC,SAC3BnF,IAAAC,cAACmF,IAAU,CACT1E,KAAK,gBACLC,MAAO2E,EAAY5C,cACnBX,SAAUzB,EACV4C,UAAWP,EAAayC,YAExBpF,IAAAC,cAACiG,IAAgB,CACfvF,MAAM,OACNwF,QAASnG,IAAAC,cAACmG,IAAK,MACfzE,MAAM,sBAER3B,IAAAC,cAACiG,IAAgB,CAACvF,MAAM,MAAMwF,QAASnG,IAAAC,cAACmG,IAAK,MAAKzE,MAAM,SAI3B,SAA9B2D,EAAY5C,eACX1C,IAAAC,cAAAD,IAAAqG,SAAA,KACErG,IAAAC,cAACwB,IAAS,CACRC,GAAG,aACHhB,KAAK,aACLiB,MAAM,cACNC,QAAQ,WACRjB,MAAO2E,EAAYK,WACnB5D,SAAUzB,EACVuB,UAAQ,EACRyE,OAAQZ,KAAwBD,IAChCc,YACGb,KAAwBD,IACrB,uCACA,KAGRzF,IAAAC,cAACwB,IAAS,CACRC,GAAG,aACHhB,KAAK,aACLiB,MAAM,cACNC,QAAQ,WACRjB,MAAO2E,EAAYO,WACnB9D,SAAUzB,EACVuB,UAAQ,EACRyE,OAAQZ,KAAwBD,IAChCc,YACGb,KAAwBD,IACrB,uCACA,KAGRzF,IAAAC,cAACwB,IAAS,CACRC,GAAG,aACHhB,KAAK,aACLiB,MAAM,cACNC,QAAQ,WACRjB,MAAO2E,EAAYQ,WACnB/D,SAAUzB,EACVuB,UAAQ,EACRyE,OAAQZ,KAAwBD,IAChCc,YACGb,KAAwBD,IACrB,uCACA,KAGRzF,IAAAC,cAACwB,IAAS,CACRC,GAAG,MACHhB,KAAK,MACLiB,MAAM,MACNC,QAAQ,WACRjB,MAAO2E,EAAYS,IACnBhE,SAAUzB,EACVuB,UAAQ,EACRyE,OAAQZ,KAAwBD,IAChCc,YACGb,KAAwBD,IACrB,uCACA,MAMmB,QAA9BH,EAAY5C,eACX1C,IAAAC,cAACwB,IAAS,CACRC,GAAG,QACHhB,KAAK,QACLiB,MAAM,SACNC,QAAQ,WACRjB,MAAO2E,EAAYW,MACnBlE,SAAUzB,EACVuB,UAAQ,EACRyE,OAAQN,KAAuBP,IAC/Bc,YACGP,KAAuBP,IACpB,6BACA,MAOlB,E,mwCCjKA,IAAMe,EAAQ,CAAC,QAAS,UAAW,UAAW,eAE/B,SAASC,IACtB,IAA+CC,EAAAC,EAAXC,mBAAS,GAAE,GAAxCC,EAAUH,EAAA,GAAEI,EAAaJ,EAAA,GACiBK,EAAAJ,EAAnBC,mBAAS,IAAII,KAAM,GAA1CC,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAOxBI,EAAAR,EALoCC,mBAAS,CAC7C9E,QAAS,GACTE,KAAM,GACNC,QAAS,GACTC,QAAS,KACT,GALK9B,EAAW+G,EAAA,GAAE9G,EAAc8G,EAAA,GAchCC,EAAAT,EAPoCC,mBAAS,CAC7ClE,cAAe,GACfiD,WAAY,GACZE,WAAY,GACZC,WAAY,GACZC,IAAK,GACLE,MAAO,KACP,GAPKX,EAAW8B,EAAA,GAAE7B,EAAc6B,EAAA,GAS5BC,EAAiB,SAACC,GACtB,OAAgB,IAATA,CACT,EAEMC,EAAgB,SAACD,GACrB,OAAOL,EAAQO,IAAIF,EACrB,EA6HA,OACEtH,IAAAC,cAACc,IAAG,CAACC,GAAI,CAAEmC,MAAO,OAAQ/B,UAAW,SACnCpB,IAAAC,cAACwH,IAAO,CAACZ,WAAYA,GAClBL,EAAM1C,KAAI,SAACnC,EAAO+F,GACjB,IAAMC,EAAY,CAAC,EACbC,EAAa,CAAC,EASpB,OARIP,EAAeK,KACjBE,EAAWC,SACT7H,IAAAC,cAACmD,IAAU,CAACxB,QAAQ,WAAU,aAG9B2F,EAAcG,KAChBC,EAAUG,WAAY,GAGtB9H,IAAAC,cAAC8H,IAAIC,EAAA,CAAChE,IAAKrC,GAAWgG,GACpB3H,IAAAC,cAACgI,IAAcL,EAAajG,GAGlC,KAlDoB,SAAC2F,GACzB,OAAQA,GACN,KAAK,EACH,OAAOtH,IAAAC,cAACF,EAAS,MACnB,KAAK,EACH,OACEC,IAAAC,cAACC,EAAW,CACVE,YAAaA,EACbC,eAAgBA,IAGtB,KAAK,EACH,OACEL,IAAAC,cAACoF,EAAW,CACVC,YAAaA,EACbC,eAAgBA,IAGtB,KAAK,EACH,OACEvF,IAAAC,cAACwC,EAAc,CACbX,QAAS1B,EACTsC,cAAe4C,EAAY5C,gBAIjC,QACE,OAAO,KAEb,CAwBKwF,CAAkBrB,GACnB7G,IAAAC,cAAA,WACG4G,IAAeL,EAAM2B,OACpBnI,IAAAC,cAACD,IAAMqG,SAAQ,KACbrG,IAAAC,cAACmD,IAAU,CAACpC,GAAI,CAAEoH,GAAI,EAAGC,GAAI,IAAK,yCAGlCrI,IAAAC,cAACc,IAAG,CAACC,GAAI,CAAEC,QAAS,OAAQC,cAAe,MAAOoH,GAAI,IACpDtI,IAAAC,cAACc,IAAG,CAACC,GAAI,CAAEuH,KAAM,cACjBvI,IAAAC,cAACqE,IAAM,CAACC,QAhFA,WAClBuC,EAAc,GACdzG,EAAe,CACbyB,QAAS,GACTE,KAAM,GACNC,QAAS,GACTC,QAAS,KAEXqD,EAAe,CACb7C,cAAe,GACfiD,WAAY,GACZE,WAAY,GACZC,WAAY,GACZC,IAAK,GACLE,MAAO,IAEX,GAgE0C,WAIlCjG,IAAAC,cAACD,IAAMqG,SAAQ,KACbrG,IAAAC,cAACc,IAAG,CAACC,GAAI,CAAEC,QAAS,OAAQC,cAAe,MAAOoH,GAAI,IACpDtI,IAAAC,cAACqE,IAAM,CACLkE,MAAM,UACNC,SAAyB,IAAf5B,EACVtC,QA5GK,WACjBuC,GAAc,SAAC4B,GAAc,OAAKA,EAAiB,CAAC,GACtD,EA2Gc1H,GAAI,CAAE2H,GAAI,IACX,QAGD3I,IAAAC,cAACc,IAAG,CAACC,GAAI,CAAEuH,KAAM,cAChBlB,EAAeR,IACd7G,IAAAC,cAACqE,IAAM,CAACkE,MAAM,UAAUjE,QA/GnB,WACjB,IAAK8C,EAAeR,GAGlB,MAAM,IAAI+B,MAAM,8CAGlB9B,GAAc,SAAC4B,GAAc,OAAKA,EAAiB,CAAC,IACpDxB,GAAW,SAAC2B,GACV,IAAMC,EAAa,IAAI9B,IAAI6B,EAAYE,UAEvC,OADAD,EAAWE,IAAInC,GACRiC,CACT,GACF,EAkG2D9H,GAAI,CAAE2H,GAAI,IAAK,QAK9D3I,IAAAC,cAACqE,IAAM,CAACC,QA/KD,WAEjB,GAAmB,IAAfsC,EAAkB,CAOpB,IALsB,CAAC,UAAW,OAAQ,UAAW,WACZoC,OACvC,SAACC,GAAK,MAAmC,KAA9B9I,EAAY8I,GAAOtD,MAAa,IAM3C,YADAuD,MAAM,kDAGV,MAAO,GAAmB,IAAftC,EAAkB,CAE3B,GAAkC,KAA9BvB,EAAY5C,cAGd,YADAyG,MAAM,mCAKR,GAAkC,SAA9B7D,EAAY5C,eACd,GACoC,KAAlC4C,EAAYK,WAAWC,QACW,KAAlCN,EAAYO,WAAWD,QACW,KAAlCN,EAAYQ,WAAWF,QACI,KAA3BN,EAAYS,IAAIH,OAIhB,YADAuD,MAAM,sDAGH,GAAkC,QAA9B7D,EAAY5C,eACY,KAA7B4C,EAAYW,MAAML,OAGpB,YADAuD,MAAM,6BAMZ,CAGArC,GAAc,SAAC4B,GAAc,OAAKA,EAAiB,CAAC,IACpD,IAAII,EAAa7B,EACbM,EAAcV,KAChBiC,EAAa,IAAI9B,IAAI8B,EAAWC,WACtB,OAAQlC,GAEpBK,EAAW4B,EACb,GA2HejC,IAAeL,EAAM2B,OAAS,EAAI,IAAM,WAQzD,C,4BCpNeiB,UAVM,WACnB,OACEpJ,IAAAC,cAACoJ,IAAI,CAAClF,MAAM,YACVnE,IAAAC,cAACqJ,IAAS,CAACjI,SAAS,MAClBrB,IAAAC,cAACwG,EAAY,MAAG,KAIxB,C,6sBCTA,IAAM4C,EAAOE,sBAAW,SAAApJ,EAAoCqJ,GAAQ,IAAzCC,EAAQtJ,EAARsJ,SAAQC,EAAAvJ,EAAEgE,aAAK,IAAAuF,EAAG,GAAEA,EAAKC,EAAIC,EAAAzJ,EAAA0J,GACtD,OACE7J,IAAAC,cAAA,MAAA+H,EAAA,CAAKwB,IAAKA,GAASG,GACjB3J,IAAAC,cAAC6J,IAAM,KACL9J,IAAAC,cAAA,aAAQkE,IAETsF,EAGP,IAEAJ,EAAKU,UAAY,CACfN,SAAUO,IAAUC,KAAKC,WACzB/F,MAAO6F,IAAUG,QAGJd,K","file":"checkout.page.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst LoginStep = () => {\r\n  return <h1>Login Step</h1>;\r\n};\r\n\r\nexport default LoginStep;\r\n","import React, { useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nconst AddressStep = ({ addressData, setAddressData }) => {\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setAddressData((prevAddressData) => ({\r\n      ...prevAddressData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          gap: \"16px\",\r\n          marginTop: \"50px\",\r\n          maxWidth: \"50%\",\r\n          justifyContent: \"space-between\",\r\n          marginLeft: \"auto\",\r\n          marginRight: \"auto\",\r\n        }}\r\n      >\r\n        <TextField\r\n          id=\"address\"\r\n          name=\"address\"\r\n          label=\"Address\"\r\n          variant=\"outlined\"\r\n          required\r\n          value={addressData.address}\r\n          onChange={handleChange}\r\n        />\r\n        <TextField\r\n          id=\"city\"\r\n          name=\"city\"\r\n          label=\"City\"\r\n          variant=\"outlined\"\r\n          required\r\n          value={addressData.city}\r\n          onChange={handleChange}\r\n        />\r\n        <TextField\r\n          id=\"pincode\"\r\n          name=\"pincode\"\r\n          label=\"Pincode\"\r\n          variant=\"outlined\"\r\n          required\r\n          value={addressData.pincode}\r\n          onChange={handleChange}\r\n        />\r\n        <TextField\r\n          id=\"country\"\r\n          name=\"country\"\r\n          label=\"Country\"\r\n          variant=\"outlined\"\r\n          required\r\n          value={addressData.country}\r\n          onChange={handleChange}\r\n        />\r\n      </Box>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddressStep;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\n\r\nconst customPlaceOrderStyles = makeStyles((theme) => ({\r\n  MainBlock: {\r\n    display: \"flex\",\r\n    marginTop: \"50px\",\r\n    flexDirection: \"row\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      flexDirection: \"column\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst PlaceOrderStep = ({ address, paymentMethod }) => {\r\n  // Dummy data for testing purposes\r\n\r\n  const customStyles = customPlaceOrderStyles();\r\n  const cart = useSelector((state) => state.products.cart);\r\n  const navigate = useNavigate();\r\n\r\n  const handleNav = (value) => {\r\n    let path = `/app/${value}`;\r\n    navigate(path);\r\n  };\r\n\r\n  const handlePlaceOrder = () => {\r\n    // You can perform any additional logic or place the order here\r\n    // For now, we will just log the data to the console.\r\n    console.log(\"Shipping Address:\", address);\r\n    console.log(\"Payment Details:\", paymentDetails);\r\n    console.log(\"Cart Items:\", cart);\r\n    // handleNext(); // Move to the next step after placing the order\r\n  };\r\n\r\n  return (\r\n    <Box maxWidth=\"lg\" className={customStyles.MainBlock}>\r\n      <Box\r\n        maxWidth=\"sm\"\r\n        sx={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          gap: \"16px\",\r\n          width: \"100%\",\r\n          maxWidth: \"50%\",\r\n          marginLeft: \"30px\",\r\n        }}\r\n      >\r\n        <Box>\r\n          <Typography variant=\"h3\">Shipping Address:</Typography>\r\n          {/* Display the address data */}\r\n          <Typography>\r\n            {address.address}, {address.city}, {address.pincode},{\" \"}\r\n            {address.country}\r\n          </Typography>\r\n          <hr></hr>\r\n        </Box>\r\n        <Box>\r\n          <Typography variant=\"h3\">Payment Details:</Typography>\r\n          {/* Display the payment details data */}\r\n          <Typography>\r\n            {paymentMethod === \"card\"\r\n              ? \"Credit/Debit Card\"\r\n              : paymentMethod === \"upi\"\r\n              ? \"UPI\"\r\n              : \"\"}\r\n          </Typography>\r\n          <hr></hr>\r\n        </Box>\r\n        <Box>\r\n          <Typography variant=\"h3\">Cart Items:</Typography>\r\n          {/* Display the cart items data */}\r\n          <TableContainer component={Paper} sx={{ marginTop: \"35px\" }}>\r\n            <Table sx={{ maxWidth: 450 }} aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell align=\"left\"></TableCell>\r\n                  <TableCell align=\"left\">Title</TableCell>\r\n                  <TableCell align=\"left\">Quantity</TableCell>\r\n                  <TableCell align=\"left\">Amount</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {cart.map((row) => (\r\n                  <TableRow\r\n                    key={row.id}\r\n                    sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n                  >\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {row.name}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\">{row.title}</TableCell>\r\n                    <TableCell align=\"left\">{row.quantity}</TableCell>\r\n                    <TableCell align=\"left\">\r\n                      {row.quantity * row.price}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n          <hr></hr>\r\n        </Box>\r\n        <Box sx={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <Button /*onClick={handleBack}*/></Button>\r\n          <Button onClick={handlePlaceOrder}></Button>\r\n        </Box>\r\n      </Box>\r\n      <Box sx={{ marginLeft: \"20px\" }}>\r\n        <Typography variant=\"h3\" marginBottom=\"1rem\">\r\n          Subtotal ₹\r\n          {cart\r\n            .reduce((acc, item) => acc + item.quantity * item.price, 0)\r\n            .toFixed(2)}\r\n        </Typography>\r\n        <Typography marginBottom=\"1rem\">\r\n          Tax included and shipping calculated at checkout\r\n        </Typography>\r\n        <Typography marginBottom=\"1rem\">\r\n          Orders will be processed in INR.\r\n        </Typography>\r\n        <Box marginBottom=\"1rem\">\r\n          <Button variant=\"outlined\" onClick={() => handleNav(\"home\")}>\r\n            Place Order\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PlaceOrderStep;\r\n","import React from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport { makeStyles } from \"@mui/styles\";\r\n\r\nconst customPaymentStyles = makeStyles((theme) => ({\r\n  FormBox: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    gap: \"16px\",\r\n    marginTop: \"50px\",\r\n    maxWidth: \"50%\",\r\n    justifyContent: \"space-between\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      maxWidth: \"80%\",\r\n    },\r\n  },\r\n  RadioGroup: {\r\n    flexDirection: \"row\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      flexDirection: \"column\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst PaymentStep = ({ paymentData, setPaymentData }) => {\r\n  const customStyles = customPaymentStyles();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setPaymentData((prevPaymentData) => ({\r\n      ...prevPaymentData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const isPaymentMethodSelected = () => {\r\n    return paymentData.paymentMethod !== \"\";\r\n  };\r\n\r\n  const isCardPaymentValid = () => {\r\n    return (\r\n      paymentData.cardNumber.trim() !== \"\" &&\r\n      paymentData.cardHolder.trim() !== \"\" &&\r\n      paymentData.expiryDate.trim() !== \"\" &&\r\n      paymentData.cvv.trim() !== \"\"\r\n    );\r\n  };\r\n\r\n  const isUpiPaymentValid = () => {\r\n    return paymentData.upiId.trim() !== \"\";\r\n  };\r\n\r\n  const isPaymentValid = () => {\r\n    if (paymentData.paymentMethod === \"card\") {\r\n      return isCardPaymentValid();\r\n    } else if (paymentData.paymentMethod === \"upi\") {\r\n      return isUpiPaymentValid();\r\n    }\r\n\r\n    // Add more validation for other payment methods if needed\r\n\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <Box className={customStyles.FormBox}>\r\n        <RadioGroup\r\n          name=\"paymentMethod\"\r\n          value={paymentData.paymentMethod}\r\n          onChange={handleChange}\r\n          className={customStyles.RadioGroup}\r\n        >\r\n          <FormControlLabel\r\n            value=\"card\"\r\n            control={<Radio />}\r\n            label=\"Credit/Debit Card\"\r\n          />\r\n          <FormControlLabel value=\"upi\" control={<Radio />} label=\"UPI\" />\r\n          {/* Add more payment options here */}\r\n        </RadioGroup>\r\n\r\n        {paymentData.paymentMethod === \"card\" && (\r\n          <>\r\n            <TextField\r\n              id=\"cardNumber\"\r\n              name=\"cardNumber\"\r\n              label=\"Card Number\"\r\n              variant=\"outlined\"\r\n              value={paymentData.cardNumber}\r\n              onChange={handleChange}\r\n              required\r\n              error={!isCardPaymentValid() && isPaymentMethodSelected()}\r\n              helperText={\r\n                !isCardPaymentValid() && isPaymentMethodSelected()\r\n                  ? \"Please fill in all the card details.\"\r\n                  : \"\"\r\n              }\r\n            />\r\n            <TextField\r\n              id=\"cardHolder\"\r\n              name=\"cardHolder\"\r\n              label=\"Card Holder\"\r\n              variant=\"outlined\"\r\n              value={paymentData.cardHolder}\r\n              onChange={handleChange}\r\n              required\r\n              error={!isCardPaymentValid() && isPaymentMethodSelected()}\r\n              helperText={\r\n                !isCardPaymentValid() && isPaymentMethodSelected()\r\n                  ? \"Please fill in all the card details.\"\r\n                  : \"\"\r\n              }\r\n            />\r\n            <TextField\r\n              id=\"expiryDate\"\r\n              name=\"expiryDate\"\r\n              label=\"Expiry Date\"\r\n              variant=\"outlined\"\r\n              value={paymentData.expiryDate}\r\n              onChange={handleChange}\r\n              required\r\n              error={!isCardPaymentValid() && isPaymentMethodSelected()}\r\n              helperText={\r\n                !isCardPaymentValid() && isPaymentMethodSelected()\r\n                  ? \"Please fill in all the card details.\"\r\n                  : \"\"\r\n              }\r\n            />\r\n            <TextField\r\n              id=\"cvv\"\r\n              name=\"cvv\"\r\n              label=\"CVV\"\r\n              variant=\"outlined\"\r\n              value={paymentData.cvv}\r\n              onChange={handleChange}\r\n              required\r\n              error={!isCardPaymentValid() && isPaymentMethodSelected()}\r\n              helperText={\r\n                !isCardPaymentValid() && isPaymentMethodSelected()\r\n                  ? \"Please fill in all the card details.\"\r\n                  : \"\"\r\n              }\r\n            />\r\n          </>\r\n        )}\r\n\r\n        {paymentData.paymentMethod === \"upi\" && (\r\n          <TextField\r\n            id=\"upiId\"\r\n            name=\"upiId\"\r\n            label=\"UPI ID\"\r\n            variant=\"outlined\"\r\n            value={paymentData.upiId}\r\n            onChange={handleChange}\r\n            required\r\n            error={!isUpiPaymentValid() && isPaymentMethodSelected()}\r\n            helperText={\r\n              !isUpiPaymentValid() && isPaymentMethodSelected()\r\n                ? \"Please fill in the UPI ID.\"\r\n                : \"\"\r\n            }\r\n          />\r\n        )}\r\n      </Box>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PaymentStep;\r\n","import React, { useState, useRef } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Stepper from \"@mui/material/Stepper\";\r\nimport Step from \"@mui/material/Step\";\r\nimport StepLabel from \"@mui/material/StepLabel\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport LoginStep from \"./LoginStep\";\r\nimport AddressStep from \"./Address\"; // Make sure you import the correct component\r\nimport PlaceOrderStep from \"./PlaceOrder\";\r\nimport PaymentStep from \"./Payment\"; // Make sure you import the correct component\r\nimport { Visibility } from \"@mui/icons-material\";\r\n\r\nconst steps = [\"Login\", \"Address\", \"Payment\", \"Place Order\"];\r\n\r\nexport default function OrderPayment() {\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [skipped, setSkipped] = useState(new Set());\r\n\r\n  const [addressData, setAddressData] = useState({\r\n    address: \"\",\r\n    city: \"\",\r\n    pincode: \"\",\r\n    country: \"\",\r\n  });\r\n\r\n  const [paymentData, setPaymentData] = useState({\r\n    paymentMethod: \"\",\r\n    cardNumber: \"\",\r\n    cardHolder: \"\",\r\n    expiryDate: \"\",\r\n    cvv: \"\",\r\n    upiId: \"\",\r\n  });\r\n\r\n  const isStepOptional = (step) => {\r\n    return step === 0;\r\n  };\r\n\r\n  const isStepSkipped = (step) => {\r\n    return skipped.has(step);\r\n  };\r\n\r\n  const handleNext = () => {\r\n    // Move to the next step if the current step is valid\r\n    if (activeStep === 1) {\r\n      // AddressStep validation logic\r\n      const addressFields = [\"address\", \"city\", \"pincode\", \"country\"];\r\n      const isAddressStepValid = addressFields.every(\r\n        (field) => addressData[field].trim() !== \"\"\r\n      );\r\n\r\n      if (!isAddressStepValid) {\r\n        // If the AddressStep is not valid, show a message\r\n        alert(\"Please fill in all the required address fields.\");\r\n        return;\r\n      }\r\n    } else if (activeStep === 2) {\r\n      // PaymentStep validation logic\r\n      if (paymentData.paymentMethod === \"\") {\r\n        // If the PaymentStep is not valid, show a message\r\n        alert(\"Please select a payment method.\");\r\n        return;\r\n      }\r\n\r\n      // You can add more validation logic here for specific payment methods if needed.\r\n      if (paymentData.paymentMethod === \"card\") {\r\n        if (\r\n          paymentData.cardNumber.trim() === \"\" ||\r\n          paymentData.cardHolder.trim() === \"\" ||\r\n          paymentData.expiryDate.trim() === \"\" ||\r\n          paymentData.cvv.trim() === \"\"\r\n        ) {\r\n          // If the Card Payment is not valid, show a message\r\n          alert(\"Please fill in all the required card details.\");\r\n          return;\r\n        }\r\n      } else if (paymentData.paymentMethod === \"upi\") {\r\n        if (paymentData.upiId.trim() === \"\") {\r\n          // If the UPI Payment is not valid, show a message\r\n          alert(\"Please fill in the UPI ID.\");\r\n          return;\r\n        }\r\n      }\r\n\r\n      // If the PaymentStep is valid, proceed to the next step\r\n    }\r\n\r\n    // If the current step is valid, move to the next step\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    let newSkipped = skipped;\r\n    if (isStepSkipped(activeStep)) {\r\n      newSkipped = new Set(newSkipped.values());\r\n      newSkipped.delete(activeStep);\r\n    }\r\n    setSkipped(newSkipped);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    if (!isStepOptional(activeStep)) {\r\n      // You probably want to guard against something like this,\r\n      // it should never occur unless someone's actively trying to break something.\r\n      throw new Error(\"You can't skip a step that isn't optional.\");\r\n    }\r\n\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    setSkipped((prevSkipped) => {\r\n      const newSkipped = new Set(prevSkipped.values());\r\n      newSkipped.add(activeStep);\r\n      return newSkipped;\r\n    });\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setActiveStep(0);\r\n    setAddressData({\r\n      address: \"\",\r\n      city: \"\",\r\n      pincode: \"\",\r\n      country: \"\",\r\n    });\r\n    setPaymentData({\r\n      paymentMethod: \"\",\r\n      cardNumber: \"\",\r\n      cardHolder: \"\",\r\n      expiryDate: \"\",\r\n      cvv: \"\",\r\n      upiId: \"\",\r\n    });\r\n  };\r\n\r\n  const renderStepContent = (step) => {\r\n    switch (step) {\r\n      case 0:\r\n        return <LoginStep />;\r\n      case 1:\r\n        return (\r\n          <AddressStep\r\n            addressData={addressData}\r\n            setAddressData={setAddressData}\r\n          />\r\n        );\r\n      case 2:\r\n        return (\r\n          <PaymentStep\r\n            paymentData={paymentData}\r\n            setPaymentData={setPaymentData}\r\n          />\r\n        );\r\n      case 3:\r\n        return (\r\n          <PlaceOrderStep\r\n            address={addressData}\r\n            paymentMethod={paymentData.paymentMethod}\r\n          />\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ width: \"100%\", marginTop: \"50px\" }}>\r\n      <Stepper activeStep={activeStep}>\r\n        {steps.map((label, index) => {\r\n          const stepProps = {};\r\n          const labelProps = {};\r\n          if (isStepOptional(index)) {\r\n            labelProps.optional = (\r\n              <Typography variant=\"caption\">Optional</Typography>\r\n            );\r\n          }\r\n          if (isStepSkipped(index)) {\r\n            stepProps.completed = false;\r\n          }\r\n          return (\r\n            <Step key={label} {...stepProps}>\r\n              <StepLabel {...labelProps}>{label}</StepLabel>\r\n            </Step>\r\n          );\r\n        })}\r\n      </Stepper>\r\n      {/* Render the component based on the active step */}\r\n      {renderStepContent(activeStep)}\r\n      <div>\r\n        {activeStep === steps.length ? (\r\n          <React.Fragment>\r\n            <Typography sx={{ mt: 2, mb: 1 }}>\r\n              All steps completed - you&apos;re finished\r\n            </Typography>\r\n            <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\r\n              <Box sx={{ flex: \"1 1 auto\" }} />\r\n              <Button onClick={handleReset}>Reset</Button>\r\n            </Box>\r\n          </React.Fragment>\r\n        ) : (\r\n          <React.Fragment>\r\n            <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\r\n              <Button\r\n                color=\"inherit\"\r\n                disabled={activeStep === 0}\r\n                onClick={handleBack}\r\n                sx={{ mr: 1 }}\r\n              >\r\n                Back\r\n              </Button>\r\n              <Box sx={{ flex: \"1 1 auto\" }} />\r\n              {isStepOptional(activeStep) && (\r\n                <Button color=\"inherit\" onClick={handleSkip} sx={{ mr: 1 }}>\r\n                  Skip\r\n                </Button>\r\n              )}\r\n\r\n              <Button onClick={handleNext}>\r\n                {activeStep === steps.length - 1 ? \" \" : \"Next\"}\r\n              </Button>\r\n            </Box>\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    </Box>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport OrderPayment from \"./ShippingPage\";\r\nimport { Container } from \"@mui/material\";\r\nimport Page from \"../../components/Page\";\r\n\r\nconst CheckOutPage = () => {\r\n  return (\r\n    <Page title=\"checkout\">\r\n      <Container maxWidth=\"md\">\r\n        <OrderPayment />;\r\n      </Container>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default CheckOutPage;\r\n","import React, { forwardRef } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Page = forwardRef(({ children, title = \"\", ...rest }, ref) => {\r\n  return (\r\n    <div ref={ref} {...rest}>\r\n      <Helmet>\r\n        <title>{title}</title>\r\n      </Helmet>\r\n      {children}\r\n    </div>\r\n  );\r\n});\r\n\r\nPage.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default Page;\r\n"],"sourceRoot":""}